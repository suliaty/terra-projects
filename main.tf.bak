provider "aws" {
  
}


#Remote state with s3
terraform {
  backend "s3" {
    bucket = "my-statefile"
    key    = "terraform.tfstate"
    dynamodb_table = "my-Dynamo"
    region = "us-east-1"
  }
}
#VPC block
resource "aws_vpc" "main" {
  cidr_block       = "10.0.0.0/16"

  tags = {
    Name = "main"
  }
}
# Declare the data source
data "aws_availability_zones" "azs" {
  state = "available"
}



resource "aws_subnet" "public" {
  vpc_id     = aws_vpc.main.id
  cidr_block = "10.0.5.0/24"
  availability_zone = data.aws_availability_zones.azs.names[0]
  tags={
    Name = "public"
  }
}

resource "aws_subnet" "private" {
  vpc_id     = aws_vpc.main.id
  cidr_block = "10.0.7.0/24"
  availability_zone = data.aws_availability_zones.azs.names[1]
  tags={
    Name = "private"
  }
}

#IGW
resource "aws_internet_gateway" "gw" {
  vpc_id = aws_vpc.main.id

  tags = {
    Name = "main"
  }
}

resource "aws_route_table" "pub_rt" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.gw.id
  }
  tags = {
    Name = "pub-rt"
  }
}

resource "aws_route_table_association" "a" {
  subnet_id      = aws_subnet.public.id
  route_table_id = aws_route_table.pub_rt.id
}

#security group
resource "aws_security_group" "mysg" {
  name        = "allow_http"
  description = "Allow TLS inbound traffic"
  vpc_id      = aws_vpc.main.id

ingress {
    description      = "HTTP from Anywhere"
    from_port        = 80
    to_port          = 80
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  }

  ingress {
    description      = "SSH from Anywhere"
    from_port        = 22
    to_port          = 22
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  }
  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
  }

  tags = {
    Name = "allow-http"
  }
}

#Instance with user-data scripts
resource "aws_instance" "newec2" {
  ami           = "ami-053b0d53c279acc90"
  instance_type = "t2.micro"
  #count = 2
  key_name = "sonarqube key"
  associate_public_ip_address = true
  user_data = <<-EOF
  #!/bin/bash
  sudo apt update
  sudo apt install apache2 -y
  sudo systemctl start apache2
  EOF
   vpc_security_group_ids = [aws_security_group.mysg.id]
   subnet_id = aws_subnet.public.id
   tags = {
    Name = "apache-ec2"
  }
}

#Load balancer and components
resource "aws_lb" "test" {
  name               = "test-lb-tf"
  internal           = false
  load_balancer_type = "application"
  security_groups = [aws_security_group.mysg.id]
  subnets = [aws_subnet.public.id,aws_subnet.private.id]
  tags = {
    Name = "App-load-balancer"
  }
}

resource "aws_lb_target_group" "test" {
  name     = "tf-example-lb-tg"
  port     = 80
  protocol = "HTTP"
  vpc_id   = aws_vpc.main.id
}

resource "aws_lb_target_group_attachment" "test" {
  target_group_arn = aws_lb_target_group.test.arn
  target_id        = aws_instance.newec2.id
  port             = 80
}

resource "aws_lb_listener" "front_end" {
  load_balancer_arn = aws_lb.test.arn
  port              = "80"
  protocol          = "HTTP"
  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.test.arn
  }
}

#Output Loab balancer dns
output "lb_url" {
  value = aws_lb.test.dns_name
}